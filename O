module od(a,p,d);
input logic[3:0] a;
output logic p,d;
assign p=(~a[3]&~a[2]&a[1])|(~a[3]&a[1]&a[0])|(a[2]&~a[1]&a[0])|(a[3]&~a[2]&a[1]&a[0]);
assign d=(~a[3]&~a[2]&~a[1]&~a[0])|(a[3]&a[2]&~a[1]&~a[0])|(a[3]&~a[2]&~a[1]&a[0])|(~a[3]&~a[2]&a[1]&a[0])|(a[3]&a[2]&a[1]&a[0])|(~a[3]&a[2]&a[1]&~a[0]);
endmodule


module test;
reg[3:0] a;
wire p,d;
od I1 (a,p,d);
initial
begin
a[3] = 1'b0; a[2] = 1'b0; a[1] = 1'b0; a[0] = 1'b0;
#10 a[3] = 1'b0; a[2] = 1'b0; a[1] = 1'b0; a[0] = 1'b1;
#10 a[3] = 1'b0; a[2] = 1'b0; a[1] = 1'b1; a[0] = 1'b0;
#10 a[3] = 1'b0; a[2] = 1'b0; a[1] = 1'b1; a[0] = 1'b1;
#10 a[3] = 1'b0; a[2] = 1'b1; a[1] = 1'b0; a[0] = 1'b0;
#10 a[3] = 1'b0; a[2] = 1'b1; a[1] = 1'b0; a[0] = 1'b1;
#10 a[3] = 1'b0; a[2] = 1'b1; a[1] = 1'b1; a[0] = 1'b0;
#10 a[3] = 1'b0; a[2] = 1'b1; a[1] = 1'b1; a[0] = 1'b1;
#10 a[3] = 1'b1; a[2] = 1'b0; a[1] = 1'b0; a[0] = 1'b0;
#10 a[3] = 1'b1; a[2] = 1'b0; a[1] = 1'b0; a[0] = 1'b1;
#10 a[3] = 1'b1; a[2] = 1'b0; a[1] = 1'b1; a[0] = 1'b0;
#10 a[3] = 1'b1; a[2] = 1'b0; a[1] = 1'b1; a[0] = 1'b1;
#10 a[3] = 1'b1; a[2] = 1'b1; a[1] = 1'b0; a[0] = 1'b0;
#10 a[3] = 1'b1; a[2] = 1'b1; a[1] = 1'b0; a[0] = 1'b1;
#10 a[3] = 1'b1; a[2] = 1'b1; a[1] = 1'b1; a[0] = 1'b0;
#10 a[3] = 1'b1; a[2] = 1'b1; a[1] = 1'b1; a[0] = 1'b1;
end
endmodule
